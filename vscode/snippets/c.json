{
    "Boilerplate C": {
        "prefix": "!",
        "body": [
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "",
            "int main(int argc, char **argv)",
            "{",
            "    printf(\"$1\");",
            "",
            "    return EXIT_SUCCESS;",
            "}",
        ],
        "description": "C Boilerplate",
    },
    "Header File Boilerplate": {
        "prefix": "!h",
        "description": "Header file boilerplate",
        "body": [
            "#pragma once",
            "",
            "#ifndef UNKNOWNRORI_$1_H",
            "#define UNKNOWNRORI_$1_H",
            "",
            "$2",
            "",
            "#endif // UNKNOWNRORI_$1_H",
        ]
    },
    "Memory Allocation Macro": {
        "prefix": "!m",
        "description": "C Memory Allocation Macro",
        "body": [
            "#define make(_TYPE, _AMOUNT) (_TYPE *)calloc(_AMOUNT, sizeof(_TYPE));",
            "#define drop(_PTR) \\",
            "    free(_PTR);    \\",
            "    _PTR = NULL;",
        ]
    },
    "Custom Types Boilerplate": {
        "prefix": "!t",
        "description": "C Type Boilerplate",
        "body": [
            "#if defined(__cplusplus)",
            "#include <cstdint>",
            "#else // __cplusplus",
            "#include <stdint.h>",
            "#endif // __cplusplus",
            "",
            "typedef float f32;",
            "typedef double f64;",
            "typedef int8_t i8;",
            "typedef int16_t i16;",
            "typedef int32_t i32;",
            "typedef int64_t i64;",
            "typedef __int128_t i128;",
            "typedef uint8_t u8;",
            "typedef uint16_t u16;",
            "typedef uint32_t u32;",
            "typedef uint64_t u64;",
            "typedef __uint128_t u128;",
            "typedef size_t usize;",
            "typedef ssize_t isize;",
            "",
            "#if defined(__cplusplus) == 0",
            "#define nullptr NULL",
            "#endif // __cplusplus",
        ]
    },
    "Logger & Assertion": {
        "prefix": "!l",
        "description": "Minimal C Assertion & Logger",
        "body": [
            "#define __FILENAME__ (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__)",
            "#define ASSERT(__EXPRESSION, MSG)                                                                                         \\",
            "    if (__EXPRESSION)                                                                                                     \\",
            "        fprintf(stderr, \"\\e[1;32m[PASS]\\e[0m\\t\\e[1m%s:%d\\e[0m : %s\\n\\t%s\\n\", __FILENAME__, __LINE__, #__EXPRESSION, MSG); \\",
            "    else                                                                                                                  \\",
            "        fprintf(stderr, \"\\e[1;31m[FAIL]\\e[0m\\t\\e[1m%s:%d\\e[0m : %s\\n\\t%s\\n\", __FILENAME__, __LINE__, #__EXPRESSION, MSG);",
            "#define LOG(__MSG) fprintf(stderr, \"\\e[1;33m[LOG]\\e[0m\\t\\e[1m%s:%d\\e[0m : %s\\n\", __FILENAME__, __LINE__, __MSG);",
            "#define ERR(__MSG) fprintf(stderr, \"\\e[1;41m[ERR]\\e[0m\\t\\e[1m%s:%d\\e[0m : %s\\n\", __FILENAME__, __LINE__, __MSG);",
        ]
    },
    "Cross-Compile Macro": {
        "prefix": "!c",
        "description": "Macro for creating Cross Compiled Platform",
        "body": [
            "#if defined(_WIN32)",
            "",
            "#elif defined(__linux__) || defined(__APPLE__)",
            "",
            "#else",
            "",
            "#error \"Unknown Target Architecture\"",
            "",
            "#endif",
        ]
    },
    "CPP Ifdef": {
        "prefix": "!cpp",
        "description": "If def for CPP Extern",
        "body": [
            "#if defined(__cplusplus)",
            "extern \"C\"",
            "{",
            "#endif // __cplusplus",
            "",
            "$1",
            "",
            "#if defined(__cplusplus)",
            "}",
            "#endif // __cplusplus",
        ]
    },
    "ifdef snippet": {
        "prefix": "!i",
        "description": "Snippet for fast ifdef",
        "body": [
            "#if $1",
            "",
            "$2",
            "",
            "#endif // $1",
        ]
    }
}